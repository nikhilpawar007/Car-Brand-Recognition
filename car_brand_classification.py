# -*- coding: utf-8 -*-
"""Car Brand Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19IN_t0rCOaXjPHsUVbGeeDsjLbIOwLu1
"""

#Transfer Learning using VGG16 & VGG19

from tensorflow.keras.layers import Input,Lambda,Dense,Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

import os
IMAGE_SIZE = [224, 224]
train_path = os.chdir("/content/drive/MyDrive/Train")
test_path  = os.chdir("/content/drive/MyDrive/Test")

resnet = ResNet50(input_shape= IMAGE_SIZE +[3], weights='imagenet', include_top=False)

for layer in resnet.layers:
  layer.trainable = False

folders = glob("/content/drive/My Drive/Train/*")

x = Flatten()(resnet.output)

prediction = Dense( len(folders), activation='softmax')(x)

model = Model(inputs= resnet.input, outputs=prediction)

model.summary()

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = 'adam',
    metrics = ['accuracy']
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale= 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory("/content/drive/MyDrive/Train",
                                                target_size= (224, 224),
                                                batch_size= 32,
                                                class_mode = 'categorical')

test_set = test_datagen.flow_from_directory("/content/drive/MyDrive/Test",
                                            target_size = (224,224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

r = model.fit_generator(
    training_set,
    validation_data = test_set,
    epochs = 50,
    steps_per_epoch = len(training_set),
    validation_steps = len(test_set)
)

plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label = 'validation loss')
plt.legend()
plt.show()
plt.savefig('loss_values')

plt.plot(r.history['accuracy'], label='train acuracy')
plt.plot(r.history['val_accuracy'], label= 'validation accuracy')
plt.legend()
plt.show()
plt.savefig('accuracy_values')

from tensorflow.keras.models import load_model
model.save('model_resnet50.h5')

y_pred = model.predict(test_set)
y_pred

import numpy as np
y_pred = np.argmax(y_pred, axis=1)
y_pred

from tensorflow.keras.preprocessing import image

model = load_model('model_resnet50.h5')

img = image.load_img('/content/drive/MyDrive/Test/lamborghini/11.jpg', target_size=(224,224))

x = image.img_to_array(img)
x

x.shape

x=x/255

x = np.expand_dims(x, axis=0)
img_data = preprocess_input(x)
img_data.shape

y = model.predict(img_data)

a = np.argmax(y, axis=1)

a

